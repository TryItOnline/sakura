#!/usr/bin/env ruby

require "./codepage"
require "./commands"

DIGITS_N = "0123456789"
DIGITS_S = "⁰¹²³⁴⁵⁶⁷⁸⁹"
DIGITS_A = "⓪①②③④⑤⑥⑦⑧⑨"
DIGITS_I = "₀₁₂₃₄₅₆₇₈₉"

class Interpreter
    def initialize code
        @ast = [[]]
        @lines = []
        tokens = code.chars
        @argn = [0]
        until tokens.empty?
            @ast[-1] += parse tokens
            if tokens.first == "\n"
                tokens.shift
                @ast.push []
            end
        end
        @arguments = []
        @regs = [nil]*256
    end

    attr_reader :arguments
    attr_reader :ast
    attr_reader :lines
    attr_reader :regs

    def parse tokens
        if tokens.empty? or tokens.first == "\n"
            tokens.unshift DIGITS_A[@argn.last]
            @argn[-1] += 1
        end
        tok = tokens.first
        if DIGITS_N.include? tok
            n = 0
            n = (n * 10) + DIGITS_N.index(tokens.shift) while not tokens.empty? and DIGITS_N.include? tokens.first
            [[:N, n]]
        elsif DIGITS_S.include? tok
            n = 0
            n = (n * 10) + DIGITS_S.index(tokens.shift) while not tokens.empty? and DIGITS_S.include? tokens.first
            [[:N, n]]
        elsif tok == "↦"
            @argn.push 0
            t = [[:C, tokens.shift, [:N, CODEPAGE.index(tokens.shift)]] + parse(tokens)]
            @argn.pop
            t
        elsif tok == "↤"
            [[:C, tokens.shift, [:N, CODEPAGE.index(tokens.shift)]]]
        elsif COMMANDS.include? tok
            @argn.push 0
            a = [:C, tokens.shift]
            l = []
            l += parse tokens while l.length < (COMMANDS[tok][1].arity - 1)
            @argn.pop
            [a + l]
        elsif DIGITS_A.include? tok
            [[:C, DIGITS_I[DIGITS_A.index(tokens.shift)], [:C, "A"]]]
        elsif tok == "["
            l = []
            tokens.shift
            l += parse tokens while not tokens.empty? and tokens.first != "]"
            tokens.shift
            [[:L, l]]
        elsif tok == "⟪"
            a = [[:N, ""]]
            tokens.shift
            while not tokens.empty? and tokens.first != "⟫"
                if tokens.first == "▦"
                    tokens.shift
                    a.last[1] += tokens.shift
                elsif tokens.first == "⟪"
                    a.push [:N, ""]
                    tokens.shift
                else
                    a.last[1] += tokens.shift
                end
            end
            tokens.shift
            a
        elsif tok == "'"
            tokens.shift
            [[:N, tokens.shift]]
        elsif tok == '"'
            tokens.shift
            [[:N, tokens.shift + tokens.shift]]
        elsif not tokens.empty?
            fail "Syntax error"
        end
    end

    def eval ast
        case ast[0]
        when :N
            ast[1]
        when :C
            c = COMMANDS[ast[1]]
            args = ast.drop(2).each_with_index.map {|x, i| (c[0] >> i) == 0 ? x : eval(x)}
            c[1][self, *args]
        when :L
            ast[1].map {|e| eval e}
        end
    end

    def run args=[], i=0
        i %= @ast.length
        args = [args] unless args.instance_of? Array
        @arguments.push args
        @lines.push i
        last = nil
        @ast[i].each do |e|
            last = eval e
        end
        @lines.pop
        @arguments.pop
        last
    end
end

opt = ARGV.shift
f = ARGV.shift
if f == "-"
    stdin = IO.new 0, "rb:ASCII-8BIT"
    ascii8bit = stdin.read
elsif f
    ascii8bit = File.read f, encoding: "ASCII-8BIT"
else
    ascii8bit = ""
end
utf8 = ascii8bit.force_encoding "UTF-8"

case opt
when "-u"
    code = utf8
when "-c"
    code = decode ascii8bit
when "-e"
    print encode utf8
    exit
when "-d"
    print decode ascii8bit
    exit
else
    puts "Usage: option file"
    puts "option:"
    puts "\t-u Read file in UTF-8"
    puts "\t-c Read file in Sakura's codepage"
    puts "\t-e Encode file from UTF-8 to the codepage"
    puts "\t-d Decode file from the codepage to UTF-8"
    puts "file:"
    puts "\t-  stdin"
    exit
end

args = []
ARGV.each do |arg|
    if arg[0] == '"'
        args.push arg[1..-1]
    elsif arg[-1] == "f"
        args.push arg[0..-2].to_f
    else
        args.push arg.to_i
    end
end

i = Interpreter.new code
e = i.run args
puts e if e
